// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id          Int     @id @default(autoincrement())
  disponible  Boolean @default(true)
  nombre      String
  descripcion String?

  productos   Producto[]  // Relación inversa para Producto.categoria
}


model Descuento {
  id         Int      @id @default(autoincrement())
  disponible Boolean  @default(true)
  fechaInicio DateTime
  fechaFin    DateTime
  descuento   Float

  precios    Precio[]  // Relación inversa para Precio.descuento
}

model Detalle {
  id          Int       @id @default(autoincrement())
  disponible  Boolean   @default(true)
  talleId     Int
  talle       Talle     @relation(fields: [talleId], references: [id])
  stock       Int
  productoId  Int?
  producto    Producto? @relation(fields: [productoId], references: [id])
  color       String?
  estado      Boolean
  precioId    Int?
  precio      Precio?   @relation(fields: [precioId], references: [id])
  descripcion String?

  imagenes    Imagen[]  @relation("DetalleImagenes")
}

model Imagen {
  id         Int      @id @default(autoincrement())
  disponible Boolean  @default(true)
  url        String
  alt        String?
  detalleId  Int
  detalle    Detalle  @relation(fields: [detalleId], references: [id], name: "DetalleImagenes")
}

model OrdenCompra {
  id              Int       @id @default(autoincrement())
  disponible      Boolean   @default(true)
  usuarioId       Int
  usuario         Usuario   @relation(fields: [usuarioId], references: [id])
  total           Float?
  descuento       Float?
  fechaCompra     DateTime? @map("fecha_compra")
  direccionEnvioId Int?
  direccionEnvio  Direccion? @relation(fields: [direccionEnvioId], references: [id])

  ordenCompraDetalles OrdenCompraDetalle[]  // Relación inversa para OrdenCompraDetalle.ordenCompra
}

model OrdenCompraDetalle {
  id             Int          @id @default(autoincrement())
  disponible     Boolean      @default(true)
  ordenCompraId  Int?
  ordenCompra    OrdenCompra? @relation(fields: [ordenCompraId], references: [id])
  productoId     Int
  producto       Producto     @relation(fields: [productoId], references: [id])
  cantidad       Int
}

model Precio {
  id           Int        @id @default(autoincrement())
  disponible   Boolean    @default(true)
  precioCompra Float      @map("precio_compra")
  precioVenta  Float      @map("precio_venta")
  descuentoId  Int?
  descuento    Descuento? @relation(fields: [descuentoId], references: [id])

  detalles     Detalle[]  // Relación inversa para Detalle.precio
}



enum TipoProducto {
  REMERA
  ZAPATILLAS
  BUZO
  PANTALON
  CAMPERA
}

enum GeneroProducto {
  MASCULINO
  FEMENINO
  INFANTIL
}

model Producto {
  id            Int           @id @default(autoincrement())
  disponible    Boolean       @default(true)
  nombre        String
  tipoProducto  TipoProducto  @map("tipo_producto")
  generoProducto GeneroProducto @map("genero_producto")
  categoriaId   Int
  categoria     Categoria     @relation(fields: [categoriaId], references: [id])

  detalles      Detalle[]     // Relación inversa para Detalle.producto
  ordenCompraDetalles OrdenCompraDetalle[]  // Relación inversa para OrdenCompraDetalle.producto
}

model Talle {
  id         Int      @id @default(autoincrement())
  disponible Boolean  @default(true)
  talle      String

  detalles   Detalle[]  // Relación inversa para Detalle.talle
}

enum TipoUsuario {
  ADMINISTRADOR
  CLIENTE
}

model Usuario {
  id          Int                @id @default(autoincrement())
  disponible  Boolean            @default(true)
  nombre      String?
  contrasenia String?            @map("contrasenia")
  rol         TipoUsuario?
  email       String?
  dni         Int

  usuarioDirecciones UsuarioDireccion[]
  ordenesCompra      OrdenCompra[]  // Relación inversa para OrdenCompra.usuario
}

model Direccion {
  id           Int                 @id @default(autoincrement())
  disponible   Boolean             @default(true)
  localidad    String
  pais         String
  provincia    String
  departamento String
  codigoPostal String              @map("codigo_postal")

  usuarioDirecciones UsuarioDireccion[]
  ordenesCompra      OrdenCompra[]  // Relación inversa para OrdenCompra.direccionEnvio
}

model UsuarioDireccion {
  usuarioId   Int
  direccionId Int

  usuario     Usuario    @relation(fields: [usuarioId], references: [id])
  direccion   Direccion  @relation(fields: [direccionId], references: [id])

  @@id([usuarioId, direccionId])
  @@map("usuario_direccion")
}